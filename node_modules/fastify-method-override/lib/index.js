"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _fastifyPlugin = _interopRequireDefault(require("fastify-plugin"));
var _lodash = _interopRequireDefault(require("lodash"));
var _httpErrors = require("http-errors");
var _pathToRegexp = require("path-to-regexp");
var _path = _interopRequireDefault(require("path"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/* eslint no-restricted-syntax: ["off", "ForOfStatement"] */

const getMethod = _lodash.default.flow(_lodash.default.get, _lodash.default.toLower);
const getHooks = (routeOptions, hookName) => {
  const hook = _lodash.default.get(routeOptions, hookName, []);
  return _lodash.default.isArray(hook) ? hook : [hook];
};
const hooksTable = ['preValidation', 'preHandler'];
const getAllHooks = routeOptions => _lodash.default.flatMap(hooksTable, hookName => getHooks(routeOptions, hookName));
const fastifyMethodOverride = async (fastify, opts, next) => {
  const allowMethods = new Set(['head', 'put', 'delete', 'options', 'patch']);
  const routeMatchers = {};
  const handleRedirect = async (req, reply) => {
    const url = _lodash.default.get(req, 'raw.url');
    const originalMethod = getMethod(req, 'raw.method');
    const method = getMethod(req, 'body._method');
    if (originalMethod === 'post' && allowMethods.has(method)) {
      const route = _lodash.default.get(routeMatchers, method).find(({
        check
      }) => check(url)) || {};
      const {
        handler,
        check,
        hooks
      } = route;
      const config = _lodash.default.get(route, 'config', {});
      const replyConfig = _lodash.default.get(reply, 'context.config', {});
      _lodash.default.set(reply, 'context.config', {
        ...config,
        ...replyConfig,
        method: _lodash.default.toUpper(method)
      });
      if (!handler) {
        const message = `Route ${_lodash.default.toUpper(method)}:${url} not found`;
        throw new _httpErrors.NotFound(message);
      }
      const {
        params
      } = check(url);
      const baseParams = _lodash.default.has(params, 'unnamedParams') ? {
        '*': params.unnamedParams.join(_path.default.sep)
      } : {};
      _lodash.default.set(req, 'params', {
        ...baseParams,
        ..._lodash.default.omit(params, 'unnamedParams')
      });
      _lodash.default.set(req, 'raw.method', _lodash.default.toUpper(method));
      for (const hook of hooks) {
        // eslint-disable-next-line
        await new Promise((resolve, reject) => {
          const maybePromise = hook(req, reply, err => {
            if (err) {
              reject(err);
            } else {
              resolve();
            }
          });
          if (_lodash.default.get(maybePromise, 'constructor.name') === 'Promise') {
            maybePromise.then(() => {
              resolve();
            }).catch(err => {
              reject(err);
            });
          }
        });
        if (reply.sent) {
          return;
        }
      }
      await handler(req, reply);
    }
  };
  fastify.addHook('onRoute', routeOptions => {
    const {
      url,
      handler,
      config
    } = routeOptions;
    const method = getMethod(routeOptions, 'method');
    if (allowMethods.has(method)) {
      const hooks = getAllHooks(routeOptions);
      _lodash.default.update(routeMatchers, _lodash.default.toLower(method), (methodHandlers = []) => methodHandlers.concat({
        check: (0, _pathToRegexp.match)(url.replace(/\*.*/, ':unnamedParams*')),
        handler,
        hooks,
        config
      }));
    }
    if (_lodash.default.toLower(routeOptions.method) === 'post') {
      const preHandlers = getHooks(routeOptions, 'preHandler');
      _lodash.default.set(routeOptions, 'preHandler', [handleRedirect, ...preHandlers]);
    }
  });
  fastify.setNotFoundHandler({
    preHandler: async (req, reply) => {
      await handleRedirect(req, reply);
    }
  });
  next();
};
var _default = (0, _fastifyPlugin.default)(fastifyMethodOverride, {
  fastify: '>=2.0.0',
  name: 'fastify-method-override'
});
exports.default = _default;